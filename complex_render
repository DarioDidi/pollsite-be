# render.yaml
services:
  - type: web
    name: django-polls-api
    env: python
    plan: free
    region: ohio # or your preferred region
    buildCommand: |
      chmod +x build.sh
      ./build.sh
    startCommand: |
      python manage.py migrate --noinput
      python manage.py collectstatic --noinput
      daphne config.asgi:application --bind 0.0.0.0 --port $PORT
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: polls-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: DEBUG
        value: "False"
      - key: ALLOWED_HOSTS
        value: ".onrender.com"
      - key: WEB_CONCURRENCY
        value: "2"
      - key: CELERY_BROKER_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: DJANGO_SETTINGS_MODULE
        value: "poll_site.settings"
      - key: EMAIL_BACKEND
        value: "django.core.mail.backends.console.EmailBackend" # Update for production
      - key: FRONTEND_URL
        value: "https://your-frontend-app.onrender.com" # Update with your frontend URL

  - type: worker
    name: celery-worker
    env: python
    plan: free
    region: ohio
    buildCommand: |
      chmod +x build.sh
      ./build.sh
    startCommand: |
      celery -A config worker --loglevel=info --concurrency=2
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: polls-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY
        fromService:
          name: django-polls-api
          property: SECRET_KEY
      - key: DEBUG
        value: "False"
      - key: CELERY_BROKER_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: DJANGO_SETTINGS_MODULE
        value: "poll_site.settings"

  - type: worker
    name: celery-beat
    env: python
    plan: free
    region: ohio
    buildCommand: |
      chmod +x build.sh
      ./build.sh
    startCommand: |
      celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: polls-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY
        fromService:
          name: django-polls-api
          property: SECRET_KEY
      - key: DEBUG
        value: "False"
      - key: CELERY_BROKER_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: DJANGO_SETTINGS_MODULE
        value: "poll_site.settings"

  - type: worker
    name: channels-worker
    env: python
    plan: free
    region: ohio
    buildCommand: |
      chmod +x build.sh
      ./build.sh
    startCommand: |
      python manage.py runworker --threads=2
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: polls-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: polls-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY
        fromService:
          name: django-polls-api
          property: SECRET_KEY
      - key: DEBUG
        value: "False"
      - key: DJANGO_SETTINGS_MODULE
        value: "poll_site.settings"

  - type: postgresql
    name: polls-db
    plan: free
    region: ohio
    databaseName: polls
    ipAllowList: [] # Only allow internal connections

  - type: redis
    name: polls-redis
    plan: free
    region: ohio
    ipAllowList: [] # Only allow internal connections
    maxmemoryPolicy: noeviction # Important for production

# Health checks and monitoring
healthCheckPath: /api/health/
envVarGroups:
  - name: production
    envVars:
      - key: NODE_ENV
        value: production
      - key: PYTHONPATH
        value: "/opt/render/project/src"

# Build configuration
buildFilter:
  paths:
    - "src/**"
    - "requirements/**"
    - "manage.py"
    - "config/**"
    - "polls/**"
    - "users/**"
    - "utils/**"
    - "build.sh"
    - "render.yaml"
